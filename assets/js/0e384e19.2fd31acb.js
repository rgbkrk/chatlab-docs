/*! For license information please see 0e384e19.2fd31acb.js.LICENSE.txt */
(self.webpackChunkchatlab_docs=self.webpackChunkchatlab_docs||[]).push([[671],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9173:(e,t,n)=>{"use strict";n.d(t,{S7:()=>g,FN:()=>f});var a=n(7294);const o="executionCount_n8Od",r="cellWrapper_ZTiw",i="cellContentWrapper_LzO1",s="cellContentWrapperOutput_MdYw",l="executionCountInput_XoFn",c="executionCountOutput_WLdr";var p=n(4184),u=n.n(p);const m=e=>{let{count:t,type:n}=e,r="[ ]:";"number"!=typeof t&&"string"!=typeof t||(r=`[${t}]:`);const i=u()(o,{[l]:"input"===n,[c]:"output"===n});return a.createElement("div",{className:i},r)};var d=n(7462);const h=e=>{let{count:t,children:n,type:o}=e;const l=u()(i,{[s]:"output"===o});return a.createElement("div",{className:r},a.createElement(m,{count:t,type:o}),a.createElement("div",{className:l},n))},g=e=>a.createElement(h,(0,d.Z)({type:"input"},e)),f=e=>a.createElement(h,(0,d.Z)({type:"output"},e))},9881:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905)),r=n(9173);const i={sidebar_position:1},s="Get Started",l={unversionedId:"intro",id:"intro",title:"Get Started",description:"With ChatLab, you can augment Large Language Models with computational powers quickly.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/rgbkrk/chatlab/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Setting API Keys",permalink:"/docs/setting-api-keys"}},c={},p=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Your First Soccer Game \u26bd\ufe0f",id:"first-example",level:2},{value:"Roles of a Conversation",id:"roles-of-a-conversation",level:3},{value:"Registering Functions",id:"registering-functions",level:3},{value:"Submitting Messages",id:"submitting-messages",level:3},{value:"Calling Functions",id:"calling-functions",level:3}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-started"},"Get Started"),(0,o.kt)("p",null,"With ChatLab, you can augment Large Language Models ",(0,o.kt)("em",{parentName:"p"},"with computational powers")," quickly."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\ud83d\udc0d Write functions in Python, use any package"),(0,o.kt)("li",{parentName:"ul"},"\ud83d\udcd7 Run in Jupyter, Colab, Kaggle, Noteable, and more"),(0,o.kt)("li",{parentName:"ul"},"\ud83e\udd16 Chat with your agents in the notebook")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install chatlab\n")),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Set your OpenAI API key as an environment variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export OPENAI_API_KEY=<your key>\n")),(0,o.kt)("p",null,"You can find your API key on your ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"OpenAI account page"),". Once you have your key, set it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," environment variable."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"There are many ways to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," both securely and insecurely. Learn more methods and avoid common pitfalls via ",(0,o.kt)("a",{parentName:"p",href:"/docs/setting-api-keys"},"Setting API Keys"),".")),(0,o.kt)("h2",{id:"first-example"},"Your First Soccer Game \u26bd\ufe0f"),(0,o.kt)("p",null,"Let's play a game of soccer. We'll write a function to flip a coin to determine who gets the first move. The assistant gets to be the referee."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell executionCount=1",cell:!0,executionCount:"1"},"from chatlab import system, Conversation, user\nimport random\n\ndef flip_a_coin():\n    '''Returns heads or tails'''\n    return random.choice(['heads', 'tails'])\n\n# Setup the conversation by writing an initial screenplay\ngame_intro = '''\n## INT. SOCCER FIELD - DAY\n\n**REF**, an experienced official with a firm command of the \u26bd\ufe0f game, steps forward holding a shining silver coin. The coin that will determine the first move in the game. The home team captain steps up.\n'''\n\nconversation = Conversation(\n  system(\"Form responses in Markdown and use emojis.\"),\n  system(game_intro),\n)\nconversation.register(flip_a_coin)\n\nconversation.submit(\"**Kai**: We call tails.\")\n")),(0,o.kt)(r.FN,{count:"1",mdxType:"OutputBlock"},(0,o.kt)("details",{style:{background:"#DDE6ED",color:"#27374D",padding:".5rem 1rem",borderRadius:"5px"}},(0,o.kt)("summary",null,"\xa0\ud835\udc53\xa0 Ran `flip_a_coin`"),(0,o.kt)("p",null,"Input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{}\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"tails"\n'))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"REF"),": It's tails! The first move goes to the home team. Good luck to both teams! Let's begin the game! \u26bd\ufe0f\ud83d\udc4d\ud83c\udffc")),(0,o.kt)("h3",{id:"roles-of-a-conversation"},"Roles of a Conversation"),(0,o.kt)("p",null,"To understand what's going on, let's break down the individual ",(0,o.kt)("inlineCode",{parentName:"p"},"Message"),"s from ",(0,o.kt)("inlineCode",{parentName:"p"},"conversation.messages"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell executionCount=2",cell:!0,executionCount:"2"},"conversation.messages\n")),(0,o.kt)(r.FN,{count:"2",mdxType:"OutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"mediaType=text/plain",mediaType:"text/plain"},'{ role: "system", content: "Form responses in Markdown and use emojis." },\n\n{ role: "system", content: "## INT. SOCCER FIELD - DAY\\n\\n**REF**, an experienced official with a firm command of the \u26bd\ufe0f game, steps forward holding a shining silver coin. The coin that will determine the first move in the game. The home team captain steps up." },\n\n{ role: "user", content: "**Kai**: We call tails." },\n\n{ role: "assistant", content: None, function_call: { name: "flip_a_coin", arguments: "{}" }, },\n\n{ role: "function", content: "tails", name: "flip_a_coin" },\n\n{ role: "assistant", content: "It\'s tails! The first move goes to the home team. Good luck to both teams! Let\'s begin the game! \u26bd\ufe0f\ud83d\udc4d\ud83c\udffc", function_call: None, },\n'))),(0,o.kt)("p",null,"The four roles in a conversation are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"system")," - The system is like a narrator to inform the AI of the context of the conversation. They set the scene and steer the model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"user")," - The user is you, the human, the person, the player, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assistant")," - The assistant is the model, the AI, it's who ",(0,o.kt)("inlineCode",{parentName:"li"},"user"),"s are talking to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"function")," - The result of a function call in response to the ",(0,o.kt)("inlineCode",{parentName:"li"},"assistant")," requesting a ",(0,o.kt)("inlineCode",{parentName:"li"},"function_call"),".")),(0,o.kt)("h3",{id:"registering-functions"},"Registering Functions"),(0,o.kt)("p",null,"Any function with typed arguments can be registered quickly in a conversation. Registering the function will allow the ",(0,o.kt)("inlineCode",{parentName:"p"},"assistant")," to call it during the conversation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"conversation.register(flip_a_coin)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "flip_a_coin",\n  "description": "Returns heads or tails",\n  "parameters": { "type": "object", "properties": {}, "required": [] }\n}\n')),(0,o.kt)("p",null,"Under the hood, ChatLab inspects your function and generates a JSON Schema for it. This schema is used to validate the arguments the assistant sends to your function."),(0,o.kt)("h3",{id:"submitting-messages"},"Submitting Messages"),(0,o.kt)("p",null,"Every time you run ",(0,o.kt)("inlineCode",{parentName:"p"},"submit"),", ChatLab sends the conversation to the assistant and returns the response. The response is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"role")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"assistant"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.submit("**Kai**: We call tails.")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "role": "assistant",\n  "content": null,\n  "function_call": { "name": "flip_a_coin", "arguments": "{}" }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," because the assistant has decided to call a function. The ",(0,o.kt)("inlineCode",{parentName:"p"},"arguments")," are empty because ",(0,o.kt)("inlineCode",{parentName:"p"},"flip_a_coin")," doesn't take any arguments."),(0,o.kt)("h3",{id:"calling-functions"},"Calling Functions"),(0,o.kt)("p",null,"When the assistant calls a function, ",(0,o.kt)("inlineCode",{parentName:"p"},"chatlab")," sends back a ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," with the role ",(0,o.kt)("inlineCode",{parentName:"p"},"function"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," is the return value of the function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "role": "function",\n  "content": "tails",\n  "name": "flip_a_coin"\n}\n')))}d.isMDXComponent=!0},4184:(e,t)=>{var n;!function(){"use strict";var a={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=typeof n;if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===r){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var s in n)a.call(n,s)&&n[s]&&e.push(s)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()}}]);