"use strict";(self.webpackChunkchatlab_docs=self.webpackChunkchatlab_docs||[]).push([[256],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3617:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(7294);const a="functionLogo_jQ0C",o="functionVerbage_W7ZR",i="inlinePre_WxaR",l="rawFunctionInterfaceHeading_TEw0",c="rawFunctionInterface_zXfa",s="summary_oC8y",p="inputOutputDiv_A82G",u="chatlabChatDetails_Z6FH",m=e=>{let{title:t,text:n}=e;return r.createElement("div",null,r.createElement("div",{className:l},t),r.createElement("div",{className:c},n))},d=e=>{let{name:t="Function",verbage:n="Ran",input:l,output:c,finished:d=!0,open:h=!1}=e;return r.createElement("details",{className:u,open:h},r.createElement("summary",{className:s},r.createElement("span",{className:a},"\ud835\udc53"),r.createElement("span",{className:o},n),r.createElement("span",{className:i},t),r.createElement("span",{className:i},d?"":"...")),r.createElement("div",{className:p},l&&r.createElement(m,{title:"Input:",text:l}),c&&r.createElement(m,{title:"Output:",text:c})))}},9173:(e,t,n)=>{n.d(t,{S7:()=>h,FN:()=>y});var r=n(6010),a=n(7294);const o="executionCount_n8Od",i="cellWrapper_ZTiw",l="cellContentWrapper_LzO1",c="cellContentWrapperOutput_MdYw",s="executionCountInput_XoFn",p="executionCountOutput_WLdr",u=e=>{let{count:t,type:n}=e,i="[ ]:";"number"!=typeof t&&"string"!=typeof t||(i=`[${t}]:`);const l=(0,r.Z)(o,{[s]:"input"===n,[p]:"output"===n});return a.createElement("div",{className:l},i)};var m=n(7462);const d=e=>{let{count:t,children:n,type:o}=e;const s=(0,r.Z)(l,{[c]:"output"===o});return a.createElement("div",{className:i},a.createElement(u,{count:t,type:o}),a.createElement("div",{className:s},n))},h=e=>a.createElement(d,(0,m.Z)({type:"input"},e)),y=e=>a.createElement(d,(0,m.Z)({type:"output"},e))},3035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905)),o=n(3617),i=n(9173);const l={title:"Code Interpreter",description:"Let the machine run code"},c="Code Interpreter",s={unversionedId:"interpreter",id:"interpreter",title:"Code Interpreter",description:"Let the machine run code",source:"@site/docs/interpreter.mdx",sourceDirName:".",slug:"/interpreter",permalink:"/docs/interpreter",draft:!1,editUrl:"https://github.com/rgbkrk/chatlab-docs/tree/main/docs/interpreter.mdx",tags:[],version:"current",frontMatter:{title:"Code Interpreter",description:"Let the machine run code"},sidebar:"tutorialSidebar",previous:{title:"Setting API Keys",permalink:"/docs/setting-api-keys"}},p={},u=[{value:"Data Personas",id:"data-personas",level:2},{value:"The hidden <code>python</code> hallucination",id:"the-hidden-python-hallucination",level:2}],m={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"code-interpreter"},"Code Interpreter"),(0,a.kt)("p",null,"There is a builtin code interpreter that lets the assistant run code. It's not enabled by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=1",cell:!0,count:"1"},'from chatlab import Conversation\nfrom chatlab.builtins import run_cell\n\nconversation = Conversation()\nconversation.register(run_cell)\nconversation.submit("Please calculate sin(793.1)")\n')),(0,a.kt)(i.FN,{count:1,mdxType:"OutputBlock"},(0,a.kt)(o.Z,{open:!0,name:"run_cell",input:'{\n  "code": "import math\\nmath.sin(793.1)"\n}',output:"0.9884482539459452",mdxType:"ChatFunctionCall"}),(0,a.kt)("p",null,"The value of sin(793.1) is approximately 0.9884482539459452.")),(0,a.kt)("h2",{id:"data-personas"},"Data Personas"),(0,a.kt)("p",null,"You can let ChatGPT take on a data persona with a ",(0,a.kt)("inlineCode",{parentName:"p"},"system")," message and then have it work with ",(0,a.kt)("inlineCode",{parentName:"p"},"DataFrame"),"s you have in memory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from chatlab import Conversation, system\nfrom chatlab.builtins import run_cell\nimport pandas as pd\n\n# The Chicago Public Library location dataset\ndf = pd.read_json("https://data.cityofchicago.org/resource/x8fc-8rcq.json")\n\nconversation = Conversation(\n    system(\n        "You are a data scientist running inside a Jupyter Notebook, "\n        "collaborating with a data engineer."\n    ),\n)\nconversation.register(run_cell)\nconversation.submit("Please tell me about what\'s in `df`")\n')),(0,a.kt)("h2",{id:"the-hidden-python-hallucination"},"The hidden ",(0,a.kt)("inlineCode",{parentName:"h2"},"python")," hallucination"),(0,a.kt)("p",null,"Sometimes GPT models will hallucinate a ",(0,a.kt)("inlineCode",{parentName:"p"},"python")," tool that accepts a single string rather than the proper JSON object that ",(0,a.kt)("inlineCode",{parentName:"p"},"run_cell")," requests. You can include it in your ",(0,a.kt)("inlineCode",{parentName:"p"},"Conversation")," to handle these cases."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=1",cell:!0,count:"1"},'from chatlab import Conversation\nfrom chatlab.builtins import run_cell\n\nconversation = Conversation(\n    allow_hallucinated_python=True\n)\nconversation.register(run_cell)\nconversation.submit("Please calculate sin(793.1)")\n')),(0,a.kt)(i.FN,{count:3,mdxType:"OutputBlock"},(0,a.kt)(o.Z,{open:!0,name:"python",input:"import math\nmath.sin(793.1)",output:"0.9884482539459452",mdxType:"ChatFunctionCall"})))}h.isMDXComponent=!0}}]);