"use strict";(self.webpackChunkchatlab_docs=self.webpackChunkchatlab_docs||[]).push([[206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3617:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7294);const o="functionLogo_jQ0C",r="functionVerbage_W7ZR",i="inlinePre_WxaR",s="rawFunctionInterfaceHeading_TEw0",l="rawFunctionInterface_zXfa",c="summary_oC8y",u="inputOutputDiv_A82G",p="chatlabChatDetails_Z6FH",m=e=>{let{title:t,text:n}=e;return a.createElement("div",null,a.createElement("div",{className:s},t),a.createElement("div",{className:l},n))},d=e=>{let{name:t="Function",verbage:n="Ran",input:s,output:l,finished:d=!0,open:f=!1}=e;return a.createElement("details",{className:p,open:f},a.createElement("summary",{className:c},a.createElement("span",{className:o},"\ud835\udc53"),a.createElement("span",{className:r},n),a.createElement("span",{className:i},t),a.createElement("span",{className:i},d?"":"...")),a.createElement("div",{className:u},s&&a.createElement(m,{title:"Input:",text:s}),l&&a.createElement(m,{title:"Output:",text:l})))}},9173:(e,t,n)=>{n.d(t,{S7:()=>f,FN:()=>h});var a=n(6010),o=n(7294);const r="executionCount_n8Od",i="cellWrapper_ZTiw",s="cellContentWrapper_LzO1",l="cellContentWrapperOutput_MdYw",c="executionCountInput_XoFn",u="executionCountOutput_WLdr",p=e=>{let{count:t,type:n}=e,i="[ ]:";"number"!=typeof t&&"string"!=typeof t||(i=`[${t}]:`);const s=(0,a.Z)(r,{[c]:"input"===n,[u]:"output"===n});return o.createElement("div",{className:s},i)};var m=n(7462);const d=e=>{let{count:t,children:n,type:r}=e;const c=(0,a.Z)(s,{[l]:"output"===r});return o.createElement("div",{className:i},o.createElement(p,{count:t,type:r}),o.createElement("div",{className:c},n))},f=e=>o.createElement(d,(0,m.Z)({type:"input"},e)),h=e=>o.createElement(d,(0,m.Z)({type:"output"},e))},9568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(7462),o=(n(7294),n(3905)),r=n(3617),i=n(9173);const s={sidebar_position:1},l="Get Started",c={unversionedId:"intro",id:"intro",title:"Get Started",description:"With ChatLab, you can augment Large Language Models with computational powers quickly.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/rgbkrk/chatlab-docs/tree/main/docs/intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Setting API Keys",permalink:"/docs/setting-api-keys"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Your First Soccer Game \u26bd\ufe0f",id:"first-example",level:2},{value:"Roles of a Conversation",id:"roles-of-a-conversation",level:3},{value:"Registering Functions",id:"registering-functions",level:3},{value:"Submitting Messages",id:"submitting-messages",level:3},{value:"Calling Functions",id:"calling-functions",level:3}],m={toc:p},d="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-started"},"Get Started"),(0,o.kt)("p",null,"With ChatLab, you can augment Large Language Models ",(0,o.kt)("em",{parentName:"p"},"with computational powers")," quickly."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\ud83d\udc0d Write functions in Python, use any package"),(0,o.kt)("li",{parentName:"ul"},"\ud83d\udcd7 Run in Jupyter, Colab, Kaggle, Noteable, and more"),(0,o.kt)("li",{parentName:"ul"},"\ud83e\udd16 Chat with your agents in the notebook")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install chatlab\n")),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Set your OpenAI API key as an environment variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export OPENAI_API_KEY=<your key>\n")),(0,o.kt)("p",null,"You can find your API key on your ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"OpenAI account page"),". Once you have your key, set it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," environment variable."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"There are many ways to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," both securely and insecurely. Learn more methods and avoid common pitfalls via ",(0,o.kt)("a",{parentName:"p",href:"/docs/setting-api-keys"},"Setting API Keys"),".")),(0,o.kt)("h2",{id:"first-example"},"Your First Soccer Game \u26bd\ufe0f"),(0,o.kt)("p",null,"Let's play a game of soccer. We'll write a function to flip a coin to determine who gets the first move. The assistant gets to be the referee."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=1",cell:!0,count:"1"},"from chatlab import system, Conversation, user\nimport random\n\ndef flip_a_coin():\n    '''Returns heads or tails'''\n    return random.choice(['heads', 'tails'])\n\nconversation = Conversation(\n  system(\"You are an experienced official soccer referee\"),\n  system(\"Form responses in Markdown and use emojis.\"),\n  system(\"The home team captain steps up.\"),\n)\nconversation.register(flip_a_coin)\n\nconversation.submit(\"**Kai**: We call tails.\")\n")),(0,o.kt)(i.FN,{count:"1",mdxType:"OutputBlock"},(0,o.kt)(r.Z,{name:"flip_a_coin",input:"{}",output:'"tails"',mdxType:"ChatFunctionCall"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Referee"),": It's tails! The first move goes to the home team. Good luck to both teams! Let's begin the game! \u26bd\ufe0f\ud83d\udc4d\ud83c\udffc")),(0,o.kt)("h3",{id:"roles-of-a-conversation"},"Roles of a Conversation"),(0,o.kt)("p",null,"To understand what's going on, let's break down the individual ",(0,o.kt)("inlineCode",{parentName:"p"},"Message"),"s from ",(0,o.kt)("inlineCode",{parentName:"p"},"conversation.messages"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=2",cell:!0,count:"2"},"conversation.messages\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"output count=2",output:!0,count:"2"},"{\n  'role': 'system',\n  'content': 'You are an experienced official soccer referee'\n},\n{\n  'role': 'system',\n  'content': 'Form responses in Markdown and use emojis.'\n},\n{\n  'role': 'system',\n  'content': 'The home team captain steps up.'\n},\n{\n  'role': 'user',\n  'content': '**Kai**: We call tails.'\n},\n{\n  'role': 'assistant',\n  'content': None,\n  'function_call': {\n    'name': 'flip_a_coin',\n    'arguments': '{}'\n  }\n},\n{\n  'role': 'function',\n  'content': 'tails',\n  'name': 'flip_a_coin'\n},\n{\n  'role': \"assistant\",\n  'content': \"**Referee**: It's tails! The first move goes to the home team. Good luck to both teams! Let's begin the game! \u26bd\ufe0f\ud83d\udc4d\ud83c\udffc\",\n  'function_call': None,\n}\n")),(0,o.kt)("p",null,"The four roles in a conversation are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"system")," - The system is like a narrator to inform the AI of the context of the conversation. They set the scene and steer the model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"user")," - The user is you, the human, the person, the player, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assistant")," - The assistant is the model, the AI, it's who ",(0,o.kt)("inlineCode",{parentName:"li"},"user"),"s are talking to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"function")," - The result of a function call in response to the ",(0,o.kt)("inlineCode",{parentName:"li"},"assistant")," requesting a ",(0,o.kt)("inlineCode",{parentName:"li"},"function_call"),".")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"system")," is controlled by ",(0,o.kt)("em",{parentName:"p"},"you"),". Use it to:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Set the tone of the assistant"),(0,o.kt)("li",{parentName:"ul"},"Inform the assistant of conditions"))),(0,o.kt)("h3",{id:"registering-functions"},"Registering Functions"),(0,o.kt)("p",null,"Any function with typed arguments can be registered quickly in a conversation. Registering the function will allow the ",(0,o.kt)("inlineCode",{parentName:"p"},"assistant")," to call it during the conversation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=3",cell:!0,count:"3"},"conversation.register(flip_a_coin)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"output count=3",output:!0,count:"3"},'{\n  "name": "flip_a_coin",\n  "description": "Returns heads or tails",\n  "parameters": {\n    "type": "object",\n    "properties": {},\n    "required": []\n  }\n}\n')),(0,o.kt)("p",null,"Under the hood, ChatLab inspects your function and generates a JSON Schema for it. This schema is used to validate the arguments the assistant sends to your function."),(0,o.kt)("h3",{id:"submitting-messages"},"Submitting Messages"),(0,o.kt)("p",null,"Every time you run ",(0,o.kt)("inlineCode",{parentName:"p"},"submit"),", ChatLab sends the conversation to the assistant and returns the response. The response is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"role")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"assistant"),". If we wanted to create this message ourselves, we can run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=4",cell:!0,count:"4"},'from chatlab.messaging import assistant_function_call\n\nassistant_function_call("flip_a_coin", arguments="{}")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"output count=4",output:!0,count:"4"},'{\n  "role": "assistant",\n  "content": null,\n  "function_call": {\n    "name": "flip_a_coin",\n    "arguments": "{}"\n  }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," because the assistant has decided to call a function. The ",(0,o.kt)("inlineCode",{parentName:"p"},"arguments")," are empty because ",(0,o.kt)("inlineCode",{parentName:"p"},"flip_a_coin")," doesn't take any arguments."),(0,o.kt)("h3",{id:"calling-functions"},"Calling Functions"),(0,o.kt)("p",null,"When the assistant calls a function, ",(0,o.kt)("inlineCode",{parentName:"p"},"chatlab")," sends back a ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," with the role ",(0,o.kt)("inlineCode",{parentName:"p"},"function"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," is the return value of the function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"cell count=5",cell:!0,count:"5"},'from chatlab.messaging import function_result\n\nfunction_result(content="tails", name="flip_a_coin")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"output count=5",output:!0,count:"5"},'{\n  "role": "function",\n  "content": "tails",\n  "name": "flip_a_coin"\n}\n')))}f.isMDXComponent=!0}}]);