"use strict";(self.webpackChunkchatlab_docs=self.webpackChunkchatlab_docs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},r="Get Started",s={unversionedId:"intro",id:"intro",title:"Get Started",description:"With ChatLab, you can augment Large Language Models with computational powers quickly.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/rgbkrk/chatlab/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Setting API Keys",permalink:"/docs/setting-api-keys"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"First Example \u26bd\ufe0f",id:"first-example-\ufe0f",level:2},{value:"Roles of a Conversation",id:"roles-of-a-conversation",level:3},{value:"Registering Functions",id:"registering-functions",level:3},{value:"Submitting Messages",id:"submitting-messages",level:3},{value:"Calling Functions",id:"calling-functions",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-started"},"Get Started"),(0,i.kt)("p",null,"With ChatLab, you can augment Large Language Models ",(0,i.kt)("em",{parentName:"p"},"with computational powers")," quickly."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\ud83d\udc0d Write functions in Python, use any package"),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udcd7 Run in Jupyter, Colab, Kaggle, Noteable, and more"),(0,i.kt)("li",{parentName:"ul"},"\ud83e\udd16 Chat with your agents in the notebook")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install chatlab\n")),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Set your OpenAI API key as an environment variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export OPENAI_API_KEY=<your key>\n")),(0,i.kt)("p",null,"You can find your API key on your ",(0,i.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"OpenAI account page"),". Once you have your key, set it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," environment variable."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There are many ways to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," both securely and insecurely. Learn more methods and avoid common pitfalls via ",(0,i.kt)("a",{parentName:"p",href:"/docs/setting-api-keys"},"Setting API Keys"),".")),(0,i.kt)("h2",{id:"first-example-\ufe0f"},"First Example \u26bd\ufe0f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from chatlab import system, Conversation, user\nimport random\n\ndef flip_a_coin():\n    \'\'\'Returns heads or tails\'\'\'\n    return random.choice([\'heads\', \'tails\'])\n\nconversation = Conversation(\n  system("Form responses in Markdown and use emojis."),\n  system(\n      "## INT. SOCCER FIELD - DAY\\n\\n"\n      "**REF**, an experienced official with a firm command of the \u26bd\ufe0f game, "\n      "steps forward holding a shining silver coin. The coin that will "\n      "determine the first move in the game. The home team captain steps up."\n  )\n)\nconversation.register(flip_a_coin)\n\nconversation.submit("**Kai**: We call tails.")\n')),(0,i.kt)("details",{style:{background:"#DDE6ED",color:"#27374D",padding:".5rem 1rem",borderRadius:"5px"}},(0,i.kt)("summary",null,"\xa0\ud835\udc53\xa0 Ran `flip_a_coin`"),(0,i.kt)("p",null,"Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"{}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"tails"\n'))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"REF"),": It's tails! The first move goes to the home team. Good luck to both teams! Let's begin the game! \u26bd\ufe0f\ud83d\udc4d\ud83c\udffc")),(0,i.kt)("h3",{id:"roles-of-a-conversation"},"Roles of a Conversation"),(0,i.kt)("p",null,"To understand what's going on, let's break down the individual ",(0,i.kt)("inlineCode",{parentName:"p"},"Message"),"s from ",(0,i.kt)("inlineCode",{parentName:"p"},"conversation.messages"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"[{'role': 'system', 'content': 'Form responses in Markdown and use emojis.'},\n {'role': 'system',\n  'content': '## INT. SOCCER FIELD - DAY\\n\\n**REF**, an experienced official with a firm command of the \u26bd\ufe0f game, steps forward holding a shining silver coin. The coin that will determine the first move in the game. The home team captain steps up.'},\n {'role': 'user', 'content': '**Kai**: We call tails.'},\n {'role': 'assistant',\n  'content': None,\n  'function_call': {'name': 'flip_a_coin', 'arguments': '{}'}},\n {'role': 'function', 'content': 'tails', 'name': 'flip_a_coin'},\n {'role': 'assistant',\n  'content': 'It\\'s tails! The first move goes to the home team. Good luck to both teams! Let\\'s begin the game! \u26bd\ufe0f\ud83d\udc4d\ud83c\udffc',\n  'function_call': None}\n]\n")),(0,i.kt)("p",null,"The four roles in a conversation are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"system")," - The system is like a narrator to inform the AI of the context of the conversation. They set the scene and steer the model."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," - The user is you, the human, the person, the player, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assistant")," - The assistant is the model, the AI, it's who ",(0,i.kt)("inlineCode",{parentName:"li"},"user"),"s are talking to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"function")," - The result of a function call in response to the ",(0,i.kt)("inlineCode",{parentName:"li"},"assistant")," requesting a ",(0,i.kt)("inlineCode",{parentName:"li"},"function_call"),".")),(0,i.kt)("h3",{id:"registering-functions"},"Registering Functions"),(0,i.kt)("p",null,"Any function with typed arguments can be registered quickly in a conversation. Registering the function will allow the ",(0,i.kt)("inlineCode",{parentName:"p"},"assistant")," to call it during the conversation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"conversation.register(flip_a_coin)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "flip_a_coin",\n  "description": "Returns heads or tails",\n  "parameters": { "type": "object", "properties": {}, "required": [] }\n}\n')),(0,i.kt)("p",null,"Under the hood, ChatLab inspects your function and generates a JSON Schema for it. This schema is used to validate the arguments the assistant sends to your function."),(0,i.kt)("h3",{id:"submitting-messages"},"Submitting Messages"),(0,i.kt)("p",null,"Every time you run ",(0,i.kt)("inlineCode",{parentName:"p"},"submit"),", ChatLab sends the conversation to the assistant and returns the response. The response is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"role")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"assistant"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'conversation.submit("**Kai**: We call tails.")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "role": "assistant",\n  "content": null,\n  "function_call": { "name": "flip_a_coin", "arguments": "{}" }\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," because the assistant has decided to call a function. The ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," are empty because ",(0,i.kt)("inlineCode",{parentName:"p"},"flip_a_coin")," doesn't take any arguments."),(0,i.kt)("h3",{id:"calling-functions"},"Calling Functions"),(0,i.kt)("p",null,"When the assistant calls a function, ",(0,i.kt)("inlineCode",{parentName:"p"},"chatlab")," sends back a ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," with the role ",(0,i.kt)("inlineCode",{parentName:"p"},"function"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," is the return value of the function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "role": "function",\n  "content": "tails",\n  "name": "flip_a_coin"\n}\n')))}m.isMDXComponent=!0}}]);